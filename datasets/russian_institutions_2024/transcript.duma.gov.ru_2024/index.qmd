---
title: "transcript.duma.gov.ru_2024"
description: "Russia's Duma transcripts (in Russian, 2006-2023)"
author: Giorgio Comai
date: 2024-03-22
last-modified: 2024-03-22
categories: [dataset, Russian institutions, Duma, transcripts, Russian language]
editor: source
---

::: callout-tip
## Alternative dataset suggestion

dekoder.org (2021): Duma Speeches: A Term Frequency Analysis, v. 1.0, Discuss Data, <doi:10.48320/FB52DAC2-66E3-47A3-86C5-B2A3DADF41BF>. 
:::


```{r, echo = FALSE}
source(fs::path("..", "dataset_setup_2024.R"))


cas_set_options(
  base_folder = fs::path(fs::path_home_r(), 
                         "R",
                         "castarter_2024"),
  project = "Russian institutions",
  website = "transcript.duma.gov.ru_ru" 
)


website_name <- cas_get_options()[["website"]]
corpus_name <- stringr::str_c(website_name, "_2024")
```


```{r, echo = FALSE, message=FALSE, warning=FALSE}
corpus_df <- invisible(readr::read_csv(file = get_corpus(corpus_name = corpus_name)))
```



## Summary statistics

```{r results='asis'}
summary_stats_text <- stringr::str_c(
  stringr::str_c("**Dataset name**: ", website_name),
  "**Dataset description**: all session transcripts published in Russian on the website of Russia's Duma",
  paste("**Start date**:", min(corpus_df$date)),
  paste("**End date**:", max(corpus_df$date)),
  paste("**Total items**:", scales::number(nrow(corpus_df))),
  paste("**Available columns**:", colnames(corpus_df) %>% 
          stringr::str_c(collapse = "; ")),
  paste("**License**:", "re-publishing of contents allowed by website's terms of use, but no clear license given"),
  stringr::str_c("**Link for download**: [", corpus_name, "](https://github.com/giocomai/tadadit/releases/tag/", corpus_name, ")"),
  sep = "\n\n")

summary_stats_text()

```

```{r}
#| column: body
#| fig-width: 8
#| fig-height: 4.5
corpus_df |>
  mutate(year = lubridate::year(date)) |> 
  count(year) |> 
  ggplot(mapping = aes(x = year, y = n)) +
  geom_col() +
  scale_y_continuous(name = "", labels = scales::number) +
  scale_x_continuous(name = "", breaks = scales::pretty_breaks(n = 10)) +
  labs(
    title = "Number of items per year published on the website of Russia's Duma (transcripts)",
    subtitle = stringr::str_c(
      "Based on ",
      scales::number(nrow(corpus_df)),
      " items published between ",
      format.Date(x = min(corpus_df$date), "%d %B %Y"), 
      " and ",
      format.Date(x = max(corpus_df$date), "%d %B %Y")),
    caption = "Source: Giorgio Comai / tadadit.xyz"
  )
```

```{r}
words_per_day_df <- corpus_df |> 
  cas_count_total_words() |> 
  mutate(date = lubridate::as_date(date),
         pattern = "total words")

words_per_day_df |> 
  cas_summarise(period = "year", auto_convert = TRUE) |>
  rename(year = date) |> 
  ggplot(mapping = aes(x = year, y = n)) +
  geom_col() +
  scale_y_continuous(name = "", labels = scales::number) +
  scale_x_continuous(name = "", breaks = scales::pretty_breaks(n = 10)) +
  labs(title = "Number of words per year published on the website of Russia's Duma(transcripts)",
       subtitle = stringr::str_c("Based on ",
                                 scales::number(nrow(corpus_df)),
                                 " items published between ",
                                 format.Date(x = min(corpus_df$date), "%d %B %Y"), 
                                 " and ",
                                 format.Date(x = max(corpus_df$date), "%d %B %Y")),
       caption = "Source: Giorgio Comai / tadadit.xyz")
```



```{r setup, echo = FALSE}

corpus_original_df <- cas_read_db_contents_data() |> 
  dplyr::collect()

corpus_df <- corpus_original_df

```




## Scope of this dataset

[TODO]

## Narrative explanation of how this textual dataset was built

[TODO]

## Metadata

[TODO]

## License information

At the time contents were retrieved, the [page on the conditions for the use of website contents](http://duma.gov.ru/about/info/) makes clear that contents can be used for research purposes and can be re-published, as long as reference is always made to the original source.

> Все материалы официального сайта Государственной Думы Федерального Собрания Российской Федерации могут быть воспроизведены в любых средствах массовой информации, на серверах сети Интернет или на любых иных носителях без каких‑либо ограничений по объему и срокам публикации.

> Это разрешение в равной степени распространяется на газеты, журналы, радиостанции, телеканалы, сайты и страницы сети Интернет. Единственным условием перепечатки и ретрансляции является ссылка на первоисточник. Никакого предварительного согласия на перепечатку со стороны Аппарата Государственной Думы не требуется.

No specific license is however mentioned.

The contents of this dataset - “duma.gov.ru” - are distributed within the remits of this license. To the extent that it is possible, the dataset itself is also distributed by its creator, Giorgio Comai, at the same conditions, as well as under the Open Data Commons Attribution license (ODC-BY).


## Dataset cleaning steps


[TODO]


```{r cleaning}
corpus_df <- corpus_original_df

corpus_pre_df <- corpus_df 

## ensure dates always present
corpus_df <- corpus_df |> 
  dplyr::filter(is.na(date)==FALSE) 
  
# check <- assertthat::assert_that(nrow(corpus_original_df)==nrow(corpus_df),
#                         msg = "rows dropped due to missing dates")

## close dataset at end date
corpus_df <- corpus_df |> 
  dplyr::filter(date<=end_date) 


corpus_df <- corpus_df |> 
  dplyr::select(-id) |> 
  dplyr::rowwise() |> 
  dplyr::mutate(doc_id = stringr::str_c(website_name, "_", url_id)) |> 
  dplyr::ungroup() |> 
  dplyr::relocate(doc_id, text, date, title, url, url_id) |> 
  dplyr::arrange(date, url_id)

```




```{r piggyback, eval = FALSE}

corpus_path <- fs::path(fs::path_home_r(), 
                      "R",
                      "castarter_2024",
                      "corpora")

fs::dir_create(corpus_path)

release_file <- fs::path(corpus_path, 
                         stringr::str_c(corpus_name, ".csv.gz"))

corpus_df |> 
  readr::write_csv(file = release_file)


piggyback::pb_release_create(repo = "giocomai/tadadit",
                             tag = corpus_name,
                             body = summary_stats_text)

piggyback::pb_upload(file = release_file,
                     repo = "giocomai/tadadit",
                     tag = corpus_name)

ods_file <- fs::path(corpus_path, 
                         stringr::str_c(path = corpus_name, ".ods"))
                      
readODS::write_ods(x = corpus_df, path = ods_file)

piggyback::pb_upload(file = ods_file,
          repo = "giocomai/tadadit",
          tag = corpus_name)

cas_write_corpus(corpus = corpus_df,
                 partition = "year",
                 tif_compliant = FALSE,
                 path = fs::path(corpus_path, corpus_name))
```


