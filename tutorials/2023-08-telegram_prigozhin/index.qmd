---
title: "Processing mixed-media data published on Telegram channels: the case of 'Prigozhin's hat'"
description: "Prigozhin's press service actively responds via Telegram to questions asked by journalists. Questions are mostly posted as screenshots, responses are mostly posted as audio messages, other posts include video. How do we turn these into something that can be searched and analysed?"
author: Giorgio Comai
date: 2023-07-26
last-modified: 2023-07-26
categories: [tutorials, russia, prigozhin]
image: "giocomai_many_words_and_cyrillic_text_coming_out_of_a_computer__9b5d514f-3065-408e-9d47-3c1c15020429.webp"
bibliography: references.bib
---

{{< include ./../../litreview/_early_disclaimer.qmd >}}

## ![](giocomai_many_words_and_cyrillic_text_coming_out_of_a_computer__9b5d514f-3065-408e-9d47-3c1c15020429.webp) Context {#top-left-img}

```{r setup, eval=TRUE, include = FALSE}
renv::use(lockfile = "renv_post.lock")
packages_v <- c("dplyr",
                "fs",
                "ggplot2",
                "castarter",
                "arrow",
                "tesseract",
                "jsonlite",
                "av",
                "gt")

lapply(packages_v, require, character.only = TRUE)

theme_set(new = theme_minimal(base_family = "Roboto Condensed"))

source("functions.R")
# source("datasets.R")

# base path for the export folder from Telegram
# actual path included in the txt files, not committed to git
base_folder <- readLines("base_folder.txt") 
```

```{r renv, eval = FALSE, include = FALSE}
renv::snapshot(packages = packages_v,
               lockfile = "renv_post.lock")
```


```{r install_whisper, eval=FALSE, echo = FALSE}
Sys.setenv(WHISPER_CFLAGS = "-mavx -mavx2 -mfma -mf16c")
remotes::install_github("bnosac/audio.whisper", force = TRUE)
Sys.unsetenv("WHISPER_CFLAGS")
```


As the Kremlin tightened its control of narratives and news that feature in mainstream media, Telegram has gained a significant role as the venue where Russian citizens of different persuasions look for information and opinions. Indeed, Telegram has remained one of the few uncensored on-line spaces (another one being YouTube) that can be freely accessed from Russia without having to rely on VPNs or other censorship circumvention techniques.

In many ways, mainstream media and Telegram channels seem to be two parallel information spaces, with debates and news that are dominant on Telegram (where re-posts among popular channels are common) may be completely ignored by major broadcast media. Indeed, the invisble line tightly separating these spaces is punctured only occasionally, and figures that are prominent on Telegram or even Western discourse about the war would be almost unknown to people who relied strictly on federal TV channels to get their news.

In the full web archive of news of Russia's *Pervy Kanal*, there is literally only a handful of mentions of Evgeny Prigozhin until June 2023, all of them related to questions Putin has received in interviews in earlier years and that refer to Prigozhin's involvement with the so-called "troll factory" based in Saint Petersburg. But there is no reference to his role in Ukraine, not even during the months-long battle of Bakhmut; not even a hint or passing reference to the growing tensions between Prigozhin and the Ministry of defence that marked the months preceeding Prigozhin's mutiny.\[\^ This applies only to the online news archive of 1tv.ru, which does not include full transcripts of all broadcasts. Even if Prigozhin's role may have emerged in debates during talk shows, his complete absence from standard news reporting remains telling.\] And yet, most respondents to opinion polls seemed [to know enough about Prigozhin to have an opinion about him](https://www.levada.ru/2023/06/29/padenie-avtoriteta-evgeniya-prigozhina-i-otnoshenie-k-ispolzovaniyu-nayomnikov-i-zaklyuchyonnyh-v-voennyh-dejstviyah/). For a brief period before the mutiny, he was one of the public figures [most frequently mentioned approvingly by survey respondents](https://www.levada.ru/2023/05/31/odobrenie-institutov-rejtingi-politikov-maj-2023-goda/), at one point even [the most frequently mentioned after president Putin](https://theins.ru/obshestvo/263313), even if this is likely more the result of a relatively small number of strong supporters rather than widespread support.

Either way, it seems clear that contents spread through Telegram reach a substantial part of the Russian population. Telegram channels is also the primary way used by figures such as Prigozhin to share their opinions and messages. In brief, there is plenty of good reasons for scholars interested in the spread of information and narratives related to Russia's invasion of Ukraine to dedicate some attention to Russian-language Telegram channels. Indeed, there have been some efforts that outline the [prevalence of pro-Kremlin Telgram channels](https://medium.com/dfrlab/pro-kremlin-telegram-channels-in-russia-outperforming-channels-critical-of-russia-f2076ebef3ea). The website [tgstat.ru](https://tgstat.ru/en) collects statistics about popular Telegram channels in each language.

Rather than dealing with a large number of Telegram channels and their interactions, this post focuses on the task of analysing the contents published by a single Telegram channels, the official channel of Evgeny Prigozhin. It is an interesting case not only because of its obvious relevance in relation to the war, but also technically, because of the variety of formats it employs, which is indicative of a space where video or even audio messages may be just as important, and sometime more telling, than written words.

In brief, Prigozhin's press service actively responds via Telegram to questions asked by journalists. Questions are mostly posted as screenshots, responses are mostly posted as audio messages, other posts include video. How do we turn these into something that can be searched and analysed?

## Step 1: Get the data out of Telegram

From Telegram Desktop, it easy to export the full archive of Telegram channel in machine-readable format, exporting all posts with metadata as a single .json file, as well as all images and files in dedicated subfolders.

```{r process_telegram_json, echo=FALSE}
messages_df <- process_telegram_json(fs::path(base_folder, "result.json"))
```

First, let's have a look at some basic information about the dataset we have:

**Earliest post**: `r min(messages_df$date)`

**Latest post**: `r max(messages_df$date)`

**Total number of posts**: `r scales::number(nrow(messages_df))`

```{r prigozhin_barchart_by_month, echo=FALSE}
#| out-width: 100%

messages_df |> 
  dplyr::mutate(year = lubridate::year(date),
                month = lubridate::month(date)) |> 
  dplyr::group_by(year, month) |> 
  dplyr::count() |> 
  dplyr::ungroup() |> 
  dplyr::mutate(month = as.factor(month)) |> 
  ggplot(mapping = aes(x = month, y = n)) +
  geom_col() +
  scale_x_discrete("") +
  scale_y_continuous("") +
  facet_wrap(~ year, nrow = 1) +
  labs(title = paste0("Number of posts per month published on the Telegram channel ", sQuote("Prigozhin's hat")),
             subtitle = stringr::str_c(
        "Based on ",
        scales::number(nrow(messages_df)),
        " posts published",
        " between ",
        format.Date(x = min(messages_df$date), "%d %B %Y"), 
        " and ",
        format.Date(x = max(messages_df$date), "%d %B %Y")),
      caption = "Data processing: Giorgio Comai (OBCT/CCI) / tadadit.xyz") +
    ggplot2::theme_minimal(base_family = "Roboto Condensed") +
    ggplot2::theme(legend.position = "none",
                   text = element_text(family = "Roboto Condensed"))
```

It appears there is a distinct *crescendo* in the number of posts published by this channel, from just a handful a month until September 2020, then mopstly between 40 and 80 until September 2022, going up to more than 200 post per month until July 2023, when the channel fell almost silent post-Mutiny, afer averaging close to 10 posts per day in the previous months.

Even these basic descriptive statistics reflect some of the things we know about Prigozhin: the big increase in posts in October 2022 can easily be explained by the fact that it is only then, more precisely on 26 September 2022, that [Prigozhin publicly admitted its ties to Wagner](https://www.reuters.com/world/europe/russias-prigozhin-admits-link-wagner-mercenaries-first-time-2022-09-26/). Two years earlier, on 23 September 2020, [the US treasury significantly expanded its sanctions](https://www.reuters.com/world/europe/russias-prigozhin-admits-link-wagner-mercenaries-first-time-2022-09-26/) against entities linked to Prigozhin, which may be related to him taking a more public role.

Since the very beginning of its online presence, Prigozhin's press team published the questions it received as a screenshot, and added Prigozhin's own reply either in the text of the message or as an additional screenshot with text. As emerges from the following graph, it is basically only starting with 2023 that Prigozhin started to respond with audio messages - often, angry rants - that quickly became a trademark element of its communication.

```{r prigozhin_barchart_files_by_month, echo=FALSE}
#| out-width: 100%

messages_df |> 
  dplyr::mutate(year = as.factor(lubridate::year(date)),
                month = as.factor(lubridate::month(date))) |> 
  dplyr::filter(is.na(file)==FALSE,
                media_type == "audio_file"|mime_type=="audio/x-wav") |> 
  dplyr::group_by(year, month) |> 
  dplyr::count() |> 
  dplyr::ungroup() |> 
  tidyr::complete(year, month, fill = list(n = 0)) |> 

  ggplot(mapping = aes(x = month, y = n)) +
  geom_col() +
  scale_x_discrete("") +
  scale_y_continuous("") +
  facet_wrap(~ year, nrow = 1) +
  labs(title = paste0("Number of audio files per month posted on the Telegram channel ", sQuote("Prigozhin's hat")),
             subtitle = stringr::str_c(
        "Based on ",
        scales::number(nrow(messages_df)),
        " posts published",
        " between ",
        format.Date(x = min(messages_df$date), "%d %B %Y"), 
        " and ",
        format.Date(x = max(messages_df$date), "%d %B %Y")),
      caption = "Data processing: Giorgio Comai (OBCT/CCI) / tadadit.xyz") +
    ggplot2::theme_minimal(base_family = "Roboto Condensed") +
    ggplot2::theme(legend.position = "none",
                   text = element_text(family = "Roboto Condensed"))
```



## Step 2: An overview of the kind of posts published

Posts published on "Prigozhin's hat" Telegram channel are mostly based on a combination of formats; sometimes the contents are repeated in more than one format, sometimes they are not. 

For example, [this post](https://t.me/Prigozhin_hat/3796) shows a question asked by a media organisation as a screenshot: 

```{=html}
<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/3796" data-width="100%"></script>
```

Conveniently, this is accompanied by [another post](https://t.me/Prigozhin_hat/3795) that includes both the question and the answer given in both textual and audio format:

```{=html}
<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/3795" data-width="100%"></script>
```

In this case, everything seems easy: we can in principle ignore both the screenshotted picture and the audio-file, as the very same contents are presented also in textual format. 

But then, in other occasions there are only audio-files or voice messages with no context whatsoever. This was the case, for example, for most messages posted during the mutiny on 24 June, including [the one that announced its end](https://t.me/Prigozhin_hat/3798):

```{=html}
<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/3798" data-width="100%"></script>
```


In others still, the content of the question previously-screenshotted is transcribed, but Prigozhin's comments are conveyed only in audio format. 


```{=html}
<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/3618" data-width="100%"></script>
```


Finally, there are occasional posts including some documents or video files:

```{=html}
<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/3811" data-width="100%"></script>
```


Video files often include spoken comments, or depict meetings. They are only very occasionally central to Prigozhin's communication, and even when they are, mostly not for the spoken content. Video files should not be dismissed, however, and they may actually be an important part of the communication of other Telegram channels, all the way from Strelkov to the "military bloggers" who produce video contents.  


In the following steps, I will proceed with turning both images and audio messages into text format that can be searched and processed further. 


## Step 3: OCR images

OCR techniques to recognised text from images are well established. In this specific case, the quality of results is hindered mainly by two aspects:

- low resolution of the images
- the fact that many of these are screenshots of emails, and they may include some email metadata at the top, or some signature text at the bottom of the email
- the fact that there are sometimes more than one language in the same image, either because there's some clutter from the email screenshots, or because questions are asked in English and the response given in Russian (in the vast majority of cases, however, both questions and answers are given in Russian)

```{r ocr_extract_images, echo = FALSE}

ocr_images(messages_df = messages_df,
           base_folder = base_folder,
           destination_folder = "prigozhin_photo_transcribed",
           engine = "rus")

```

```{r text_photo_df, echo = FALSE}

text_photo_df <- purrr::map(
  .x = fs::dir_ls(path = "prigozhin_photo_transcribed"),
  .f = function(x) {
  readr::read_rds(file = x) |> 
      stringr::str_c(collapse = "\n") |> 
      tibble::enframe(value = "text_photo", name = NULL) |> 
      dplyr::mutate(id = fs::path_file(x) |> fs::path_ext_remove() |> as.numeric()) |> 
      dplyr::mutate(embed_photo =  stringr::str_c('<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/', id, '" data-width="100%"></script>')) |> 
      dplyr::relocate(id, embed_photo, text_photo)
}) |> 
  purrr::list_rbind() |> 
  dplyr::arrange(id) |> 
  dplyr::left_join(y = messages_df |> 
  dplyr::select(c("id", "date")), by = "id") |> 
  dplyr::relocate("date")




```


It's rather straightforard to extract via OCR text of the images. The following is a quick attempt, with no particular effort dedicated to polishing the results, and even as it is, it allows to quick search among transcribed text. For example, if you look for "Wagner" ("Вагнер") in the search box for the `text_photo` column, only posts where "Wagner" is mentioned in the screenshotted text will be kept. For the records, this shows that out of `r scales::number(nrow(text_photo_df))` posts with valid text extracted from the images, `r text_photo_df |> dplyr::filter(stringr::str_detect(text_photo, stringr::fixed("вагнер", ignore_case = TRUE))) |> nrow() |> scales::number()` mention "Wagner", all the way from the early days of the channel back in 2019 when Prigozhin was still vehemently denying any association with it.

Some information about the following table:

- the table includes all posts that have attached a photo from where seemingly meaningful text could be automatically extracted
- the text has been automatically extracted with OCR with `tesseract`, setting the language as Russian (hence, the glaring inaccuracies where the images include contents in other languages)
- if the post has attached more than one image, the text for each image is included in a separate row; the embedded post is always the same and it may not be immediately obvious that it includes more than one picture
- very often, the response to the question is given in a separate post: clicking through the embedded post, and then clicking on "context" may be helpful in finding more details in the posts immediately preceding or following any given post.


```{r datatable_text_embed_images, echo= FALSE, message=FALSE, warning=FALSE}
#| column: screen-inset
text_photo_df |> 
  dplyr::filter(nchar(text_photo)>30) |> 
  dplyr::filter(
    purrr::map_dbl(
      .x = text_photo,
      .f = function(x) {mean(nchar(unlist(strsplit(x, '\\s+'))))})>3) |> 
# exlcude images with non-text, i.e. those where OCR-ed words are on average
# shorter than 3 characters
  dplyr::select(-id) |> 
  DT::datatable(
    escape = FALSE,
    rownames = FALSE,
    list(
      paging = TRUE,
      pageLength =  3,
      columnDefs = list(
        list(width = "10%", targets = 0),
        list(width = "30%", targets = 1),
        list(width = "60%", targets = 1)),
     dom = 'pti'
    ),
    filter = list(position = "top"))
#reactable::reactable(columns = list(embed_photo = reactable::colDef(html = TRUE)))
```


For more detailed analysis, and depending on the type of analysis, this would likely require some more polishing efforts. Also, as the same textual content is often repeated both in the screenshotted image and as text in the original post, this may lead to extensive duplication of contents. On the other hand, if one is not into word frequency analysis but just into more effective ways to search through all contents of the channel, this may well already be of use.


## Step 4: Speech-to-text of audio and video attachments

One of the most distinguishable features of Prigozhin's mutiny for external observers was just how much communicated through Telegram posts, mostly bare audio messages of Prigozhin's raucous voice: the mutiny was launched with an audio message and its end was declared in the same way. But audio messages had become an increasingly central component of Prigozhin's approach to communication, as it was perhaps most fitting to his harsh and increasingly unhinged comments towards Russia's military leadership and the Ministry of Defence.

Many of these audio messages have been transcribed and posted as text in the same post that has the audio file, or in a separate message posted immediately sooner or later. However, others were not: these may be longer audio messages, messages with more vulgar or explicit expressions, as well as most of the messages posted during the mutiny on 24 June 2023.

Due to the molteplicity of formats employed, systematically harmonising these contents through consistent deduplication may be challenging. But the first step in that direction surely involved transcribing these audio messages. 

There are a variety of online services that offer speech-to-text as a service for a fee. Depending on the use case, the budget available, and the amount of audio to be transcribed they may be a valid option. Processing data locally introduces other constraints - mostly, computing time and resources - but allows for reproducibility, and makes irrelevant a set of additional concerns that may emerge by relying on third parties, including questions such as:

- "are third-party vendors fine with me using their services transcribing prophanities by an alleged war criminal?"
- especially for those working on violent extremism or terrorism, "will sending a bunch of extremist materials get me into trouble"?
- if I am transcribing non-public and potentially sensitive contents, is it fine ethically to send them through a third-party, perhaps one based in different jurisdiction?

Terms of service may offer some assurances, but processing data offline makes such points moot. 

To transcribe these audio-messages I used OpenAI's ["Whisper" Automatic Speech Recognition model](https://github.com/openai/whisper). For ease of use and consistency with my R-based workflow, I did this through the [`audio.whisper`](https://github.com/bnosac/audio.whisper) R package, which is a wrapper around the [whisper.cpp C++ library](https://github.com/ggerganov/whisper.cpp). 
This may sound convoluted, but it is rather straightforward in practice, as it deals with many of that complexities that users of libraries based on machine-learning models often encounter. Especially for users with poweful GPUs, this may lead to significant inefficiency. For others, this should really be just about as efficient as running the original library if `audio.whisper` is installed with the right flags (see the package's readme) and if the software is run naively, with no specific customisation or optimisations.




[Whisper speech-to-text, forthcoming]

```{r transcribe_original, eval = FALSE, echo = FALSE}
transcribe_audio(messages_df = messages_df,
                 base_folder = base_folder,
                 destination_folder = "prigozhin_audio_transcribed",
                 model = "large")



```


```{r transcribe_and_translate, eval = FALSE, echo = FALSE}

transcribe_audio(messages_df = messages_df,
                 base_folder = base_folder,
                 destination_folder = "prigozhin_audio_transcribed_translated",
                 model = "large",
                 translate = TRUE)
```



```{r prigozhin_en_transcribed, echo = FALSE}
#| column: screen-inset



purrr::map(
  .x = fs::dir_ls(path = "prigozhin_audio_transcribed_translated_large",
                  recurse = FALSE,
                  type = "file",
                  glob = "*.rds"),
  .f = function(x) {
    current_l <- readRDS(file = x)
    current_l[["data"]] |> 
      tibble::as_tibble() |> 
      dplyr::mutate(text = stringr::str_squish(text)) |> 
      dplyr::mutate(id = fs::path_file(x) |> fs::path_ext_remove() |> as.numeric()) |> 
      dplyr::relocate(id)
  }) |>
  purrr::list_rbind() |> 
  dplyr::left_join(y = messages_df |> 
                     dplyr::select(c("id", "datetime")),
                   by = "id") |> 
  dplyr::filter(datetime < lubridate::as_datetime("2023-07-01")) |> 
  # dplyr::mutate(embed_post =  stringr::str_c('<script async src="https://telegram.org/js/telegram-widget.js?22" data-telegram-post="Prigozhin_hat/', id, '" data-width="100%"></script>')) |> 
  dplyr::group_by(id) |> 
  dplyr::mutate(datetime = stringr::str_c("<a href='https://t.me/Prigozhin_hat/", id, "'>", as.character(datetime), "</a>")) |> 
  dplyr::ungroup() |> 
  dplyr::select(id, datetime, from, to, text) |> 
  dplyr::arrange(datetime) |> 
  dplyr::mutate(dplyr::across(.cols = c("from", "to"),
                              .fns = \(x) stringr::str_remove(x, "^00:") |> 
                                stringr::str_remove("[[:punct:]]000$"))) |> 
  DT::datatable(
    escape = FALSE,
    rownames = FALSE,
    list(
      paging = TRUE,
      pageLength =  5,
      columnDefs = list(
        list(width = "5%", targets = 0),
        list(width = "10%", targets = 1),
        list(width = "5%", targets = 2),
        list(width = "5%", targets = 3),
        list(width = "65%", targets = 4)),
      dom = 'pti'
    ),
    filter = list(position = "top"))


```


```{r}

```

